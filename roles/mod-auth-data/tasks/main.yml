---
# Role to build a demo mod-auth with user permissions for the sample tenant
#

# wait a few seconds to make sure modules are spun up
- wait_for: timeout=10

# need to do this first to initialize the schemas
- name: Check mod-auth modules tenant registration
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/diku/modules/{{ item.module }}"
    status_code: 200, 404
  register: tenant_mod_auth
  with_items: "{{ mod_auth_modules }}"

- name: Enable mod-auth modules for tenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/diku/modules"
    method: POST
    body_format: json
    body: '{ "id" : "{{ item.module }}" }'
    status_code: 201
  register: mod_auth_enable
  changed_when: mod_auth_enable.status == 201
  when: tenant_mod_auth.results[item.index].status == 404
  with_items: "{{ mod_auth_modules }}"

########################################
# Bootstrap admin user and permissions #
########################################

- name: Check auth_credentials for diku_admin user
  become: yes
  become_user: postgres
  shell: psql -qtc "select count(*) from diku_login_module.auth_credentials where jsonb @> '{\"username\":\"{{ mod_auth_admin.username }}\"}'" mod_auth
  register: diku_admin_credentials
  changed_when: no

- name: Insert diku_admin user into auth_credentials
  become: yes
  become_user: postgres
  shell: psql -qtc "insert into diku_login_module.auth_credentials (jsonb) values ('{\"username\":\"{{ mod_auth_admin.username }}\",\"hash\":\"{{ mod_auth_admin.hash }}\",\"salt\":\"{{ mod_auth_admin.salt }}\"}')" mod_auth
  when: diku_admin_credentials.stdout | int == 0

- name: Check permissions_users for diku_admin user
  become: yes
  become_user: postgres
  shell: psql -qtc "select count(*) from diku_permissions_module.permissions_users where jsonb @> '{\"username\":\"{{ mod_auth_admin.username }}\"}'" mod_auth
  register: diku_admin_permissions
  changed_when: no

- name: Insert diku_admin user into permissions_users
  become: yes
  become_user: postgres
  shell: psql -qtc "insert into diku_permissions_module.permissions_users (jsonb) values ('{\"username\":\"{{ mod_auth_admin.username }}\",\"permissions\":[{{ mod_auth_admin.permissions }}]}')" mod_auth
  when: diku_admin_permissions.stdout | int == 0

###############################################
# Create other mod_auth permissions and users #
###############################################

- name: Login as {{ mod_auth_admin.username }}
  uri:
    url: "{{ okapi_url }}/authn/login"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
    body: "{ 'username' : '{{ mod_auth_admin.username }}', 'password' : '{{ mod_auth_admin.password }}' }"
    status_code: 201
  register: mod_auth_login

- name: Load additional permissions
  uri:
    url: "{{ okapi_url }}/perms/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: |
      {
        'permissionName' : '{{ item.permissionName }}',
        'displayName' : '{{ item.displayName }}',
        'subPermissions' : {{ item.subPermissions }},
        'mutable' : {{ item.mutable }}
      }
    status_code: 201,422
  register: load_mod_users_perms
  changed_when: load_mod_users_perms.status == 201
  with_items: "{{ additional_permissions }}"

- name: Grant additional permissions to {{ mod_auth_admin.username }}
  uri:
    url: "{{ okapi_url }}/perms/users/{{ mod_auth_admin.username }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    status_code: 200,422
  register: other_users_admin_perms
  changed_when: other_users_admin_perms.status == 200
  with_items: "{{ admin_permissions }}"

# This should really only happen if the users aren't already there
# 400 error means the user is already there, this is not ideal
- name: Load users into users-module
  uri:
    url: "{{ okapi_url }}/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      Accept: application/json
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
    body: "{{ lookup('file', item) }}"
    status_code: 201,422
  register: load_user
  changed_when: load_user.status == 201
  with_fileglob:
    - "*_user.json"

- name: Create mod-auth credentials for other users
  uri:
    url: "{{ okapi_url }}/authn/credentials"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "username" : "{{ item.username }}", "password" : "{{ item.password }}" }'
    status_code: 201,422
  register: create_creds
  changed_when: create_creds.status == 201
  with_items: "{{ mod_auth_users }}"

- name: Create perms users 
  uri:
    url: "{{ okapi_url }}/perms/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "username" : "{{ item.username }}" }'
    status_code: 201,422
  register: create_perms
  changed_when: create_perms.status == 201
  with_items: "{{ mod_auth_users }}"

- name: Grant additional permissions to other users
  uri:
    url: "{{ okapi_url }}/perms/users/{{ item.0.username }}/permissions"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: diku
      X-Okapi-Token: "{{ mod_auth_login.x_okapi_token }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item.1 }}" }'
    status_code: 200,422
  register: mod_users_admin_perms
  changed_when: mod_users_admin_perms.status == 200
  with_subelements:
    - "{{ mod_auth_users }}"
    - permissions
    - skip_missing: true
